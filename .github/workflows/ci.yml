name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop, staging ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Web Frontend CI
  web-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web-frontend/package.json

      - name: Install dependencies
        run: |
          cd web-frontend
          npm ci

      - name: Lint code
        run: |
          cd web-frontend
          npm run lint

      - name: Type check
        run: |
          cd web-frontend
          npm run type-check

      - name: Run unit tests
        run: |
          cd web-frontend
          npm run test:unit -- --coverage --watchAll=false

      - name: Build application
        run: |
          cd web-frontend
          npm run build

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: web-frontend/coverage/lcov.info
          flags: web-frontend
          name: Web Frontend Coverage

  # Web Backend CI
  web-backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('web-backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          cd web-backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint code
        run: |
          cd web-backend
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=.git,__pycache__,build,dist
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=.git,__pycache__,build,dist

      - name: Type check
        run: |
          cd web-backend
          mypy . --ignore-missing-imports --exclude=venv/ --exclude=__pycache__/ --exclude=.git/

      - name: Run unit tests
        run: |
          cd web-backend
          pytest . -v -k "test_" --cov=. --cov-report=xml -x

      - name: Run integration tests
        run: |
          cd web-backend
          pytest . -v -k "integration" -x

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: web-backend/coverage.xml
          flags: web-backend
          name: Web Backend Coverage

  # Mobile App CI
  mobile-app:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: mobile-app/package.json

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install dependencies
        run: |
          cd mobile-app
          npm ci

      - name: Lint code
        run: |
          cd mobile-app
          npm run lint

      - name: Type check
        run: |
          cd mobile-app
          npm run type-check

      - name: Run unit tests
        run: |
          cd mobile-app
          npm run test:unit -- --coverage --watchAll=false

      - name: Build Android APK
        run: |
          cd mobile-app
          npm run build:android

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: mobile-app/coverage/lcov.info
          flags: mobile-app
          name: Mobile App Coverage

  # AI Services CI
  ai-services:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('ai-services/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          cd ai-services
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint code
        run: |
          cd ai-services
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=.git,__pycache__,build,dist
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=.git,__pycache__,build,dist

      - name: Type check
        run: |
          cd ai-services
          mypy . --ignore-missing-imports --exclude=venv/ --exclude=__pycache__/ --exclude=.git/

      - name: Run unit tests
        run: |
          cd ai-services
          pytest . -v -k "test_" --cov=. --cov-report=xml -x

      - name: Run integration tests
        run: |
          cd ai-services
          pytest . -v -k "integration" -x

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ai-services/coverage.xml
          flags: ai-services
          name: AI Services Coverage

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, python, typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codecov/codecov-action@v3
        if: always()
        with:
          file: trivy-results.sarif
          flags: security
          name: Security Scan Results

  # Docker Build Check
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build web-frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./web-frontend
          file: ./web-frontend/Dockerfile
          push: false
          tags: fataplus-web-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build web-backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./web-backend
          file: ./web-backend/Dockerfile
          push: false
          tags: fataplus-web-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build ai-services Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./ai-services
          file: ./ai-services/Dockerfile
          push: false
          tags: fataplus-ai-services:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Quality Gate
  quality-gate:
    runs-on: ubuntu-latest
    needs: [web-frontend, web-backend, mobile-app, ai-services, security]
    if: always()
    steps:
      - name: Quality Gate Check
        run: |
          # Check if all required jobs passed
          if [[ "${{ needs.web-frontend.result }}" != "success" ]]; then
            echo "Web Frontend CI failed"
            exit 1
          fi

          if [[ "${{ needs.web-backend.result }}" != "success" ]]; then
            echo "Web Backend CI failed"
            exit 1
          fi

          if [[ "${{ needs.mobile-app.result }}" != "success" ]]; then
            echo "Mobile App CI failed"
            exit 1
          fi

          if [[ "${{ needs.ai-services.result }}" != "success" ]]; then
            echo "AI Services CI failed"
            exit 1
          fi

          if [[ "${{ needs.security.result }}" != "success" ]]; then
            echo "Security scan failed"
            exit 1
          fi

          echo "All quality gates passed! âœ…"

  # Deploy to Staging (only on main/develop branches)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: quality-gate
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # This could include:
          # - Building Docker images
          # - Pushing to container registry
          # - Updating Kubernetes manifests
          # - Running database migrations
          # - Health checks

      - name: Run Staging Tests
        run: |
          echo "Running staging environment tests..."
          # Add integration tests against staging environment

      - name: Notify Deployment
        run: |
          echo "Staging deployment completed successfully!"
          # Add notification commands (Slack, Discord, etc.)
