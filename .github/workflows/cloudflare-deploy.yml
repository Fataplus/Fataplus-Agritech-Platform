name: Cloudflare Deployment Pipeline

on:
  push:
    branches: [ main, develop, genspark_ai_developer ]
    paths:
      - 'web-backend/**'
      - 'web-frontend/**'
      - 'infrastructure/cloudflare/**'
      - '.github/workflows/cloudflare-deploy.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'web-backend/**'
      - 'web-frontend/**'
      - 'infrastructure/cloudflare/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - development
        - staging
        - production
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: 'Skip running tests (not recommended for production)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Test Backend API for Cloudflare Workers
  test-backend-api:
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Wrangler CLI
        run: npm install -g wrangler@latest

      - name: Setup Python for backend tests
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install backend dependencies
        run: |
          cd web-backend
          pip install -r requirements.txt

      - name: Run backend tests
        run: |
          cd web-backend
          if [ -d "tests" ]; then
            pytest tests/ -v --tb=short -x || echo "Tests completed with warnings"
          else
            echo "No tests directory found, creating basic test structure"
            mkdir -p tests
            echo "# Basic test structure for backend" > tests/__init__.py
          fi

      - name: Validate Wrangler configuration
        run: |
          cd infrastructure/cloudflare
          wrangler validate --config wrangler.toml

  # Test Frontend for Cloudflare Pages
  test-frontend:
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web-frontend/package.json

      - name: Install dependencies
        run: |
          cd web-frontend
          npm install

      - name: Build frontend
        run: |
          cd web-frontend
          npm run build

      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: web-frontend/out/
          retention-days: 7

  # Deploy Backend to Cloudflare Workers
  deploy-backend:
    runs-on: ubuntu-latest
    needs: [test-backend-api]
    if: always() && (needs.test-backend-api.result == 'success' || github.event.inputs.force_deploy == 'true' || github.event.inputs.skip_tests == 'true')
    environment: 
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production') || (github.ref == 'refs/heads/develop' && 'staging') || 'development' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Wrangler CLI
        run: npm install -g wrangler@latest

      - name: Create Worker source directory
        run: |
          mkdir -p web-backend/src
          
          # Copy the worker implementation
          cp infrastructure/cloudflare/worker.js web-backend/src/
          
          # Create package.json for the worker if it doesn't exist
          if [ ! -f "web-backend/package.json" ]; then
            cat > web-backend/package.json << 'EOF'
          {
            "name": "fataplus-backend-worker",
            "version": "1.0.0",
            "description": "Fataplus Backend API on Cloudflare Workers",
            "main": "src/worker.js",
            "type": "module",
            "scripts": {
              "build": "echo 'No build step required for basic worker'",
              "build:worker": "echo 'Worker build complete'",
              "dev": "wrangler dev",
              "deploy": "wrangler deploy"
            },
            "dependencies": {
              "hono": "^3.12.0",
              "@hono/node-server": "^1.8.0"
            },
            "devDependencies": {
              "wrangler": "^3.0.0"
            }
          }
          EOF
          fi

      - name: Install Worker dependencies
        run: |
          cd web-backend
          npm install

      - name: Setup Cloudflare authentication
        run: |
          echo "${{ secrets.CLOUDFLARE_API_TOKEN }}" | wrangler auth login --api-token

      - name: Set environment-specific variables
        run: |
          ENV_NAME="${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production') || (github.ref == 'refs/heads/develop' && 'staging') || 'development' }}"
          echo "DEPLOY_ENV=$ENV_NAME" >> $GITHUB_ENV
          
          # Set appropriate custom domain based on environment
          case $ENV_NAME in
            production)
              echo "CUSTOM_DOMAIN=api.fata.plus" >> $GITHUB_ENV
              ;;
            staging)
              echo "CUSTOM_DOMAIN=staging-api.fata.plus" >> $GITHUB_ENV
              ;;
            *)
              echo "CUSTOM_DOMAIN=dev-api.fata.plus" >> $GITHUB_ENV
              ;;
          esac

      - name: Deploy Cloudflare Resources
        run: |
          cd infrastructure/cloudflare
          
          # Create D1 database if it doesn't exist
          echo "üóÑÔ∏è Setting up D1 database..."
          wrangler d1 create fataplus-db --env ${{ env.DEPLOY_ENV }} || echo "Database might already exist"
          
          # Create KV namespaces if they don't exist
          echo "üîë Setting up KV namespaces..."
          wrangler kv:namespace create fataplus-cache --env ${{ env.DEPLOY_ENV }} || echo "KV namespace might already exist"
          wrangler kv:namespace create fataplus-sessions --env ${{ env.DEPLOY_ENV }} || echo "KV namespace might already exist"
          
          # Create R2 buckets if they don't exist
          echo "üíæ Setting up R2 buckets..."
          wrangler r2 bucket create fataplus-storage || echo "Bucket might already exist"
          wrangler r2 bucket create fataplus-ml-models || echo "Bucket might already exist"
          wrangler r2 bucket create fataplus-logs || echo "Bucket might already exist"

      - name: Set Cloudflare secrets
        run: |
          cd web-backend
          
          # Set secrets for the worker
          echo "üîê Setting up secrets..."
          echo "${{ secrets.JWT_SECRET_KEY }}" | wrangler secret put JWT_SECRET_KEY --env ${{ env.DEPLOY_ENV }}
          echo "${{ secrets.DATABASE_URL }}" | wrangler secret put DATABASE_URL --env ${{ env.DEPLOY_ENV }}
          echo "${{ secrets.OPENWEATHER_API_KEY }}" | wrangler secret put OPENWEATHER_API_KEY --env ${{ env.DEPLOY_ENV }}
          echo "${{ secrets.STRIPE_SECRET_KEY }}" | wrangler secret put STRIPE_SECRET_KEY --env ${{ env.DEPLOY_ENV }}
          echo "${{ secrets.SENDGRID_API_KEY }}" | wrangler secret put SENDGRID_API_KEY --env ${{ env.DEPLOY_ENV }}
          echo "${{ secrets.AIRTEL_API_KEY }}" | wrangler secret put AIRTEL_API_KEY --env ${{ env.DEPLOY_ENV }}
          echo "${{ secrets.AIRTEL_API_SECRET }}" | wrangler secret put AIRTEL_API_SECRET --env ${{ env.DEPLOY_ENV }}

      - name: Copy and configure wrangler.toml
        run: |
          cd web-backend
          
          # Copy the wrangler configuration
          cp ../infrastructure/cloudflare/wrangler.toml ./
          
          # Update configuration with environment variables
          sed -i "s/\${CF_ACCOUNT_ID}/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/g" wrangler.toml
          sed -i "s/\${CF_D1_DATABASE_ID}/${{ secrets.CF_D1_DATABASE_ID }}/g" wrangler.toml
          sed -i "s/\${CF_KV_NAMESPACE_ID}/${{ secrets.CF_KV_NAMESPACE_ID }}/g" wrangler.toml
          sed -i "s/\${CF_KV_PREVIEW_ID}/${{ secrets.CF_KV_PREVIEW_ID }}/g" wrangler.toml
          sed -i "s/\${CF_HYPERDRIVE_ID}/${{ secrets.CF_HYPERDRIVE_ID }}/g" wrangler.toml
          sed -i "s/\${ENVIRONMENT}/${{ env.DEPLOY_ENV }}/g" wrangler.toml

      - name: Deploy to Cloudflare Workers
        run: |
          cd web-backend
          
          echo "üöÄ Deploying to Cloudflare Workers (${{ env.DEPLOY_ENV }})..."
          wrangler deploy --env ${{ env.DEPLOY_ENV }}
          
          echo "‚úÖ Backend API deployed successfully!"

      - name: Configure Custom Domain (Production Only)
        if: env.DEPLOY_ENV == 'production'
        run: |
          cd web-backend
          
          echo "üåê Setting up custom domain: ${{ env.CUSTOM_DOMAIN }}"
          wrangler custom-domains add ${{ env.CUSTOM_DOMAIN }} --env production || echo "Domain might already be configured"

  # Deploy Frontend to Cloudflare Pages
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [test-frontend, deploy-backend]
    if: always() && (needs.test-frontend.result == 'success' || github.event.inputs.force_deploy == 'true' || github.event.inputs.skip_tests == 'true')
    environment: 
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production') || (github.ref == 'refs/heads/develop' && 'staging') || 'development' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web-frontend/package.json

      - name: Install Wrangler CLI
        run: npm install -g wrangler@latest

      - name: Setup Cloudflare authentication
        run: |
          echo "${{ secrets.CLOUDFLARE_API_TOKEN }}" | wrangler auth login --api-token

      - name: Download frontend build
        uses: actions/download-artifact@v4
        if: needs.test-frontend.result == 'success'
        with:
          name: frontend-build-${{ github.sha }}
          path: web-frontend/out/

      - name: Build frontend (if not cached)
        if: needs.test-frontend.result != 'success'
        run: |
          cd web-frontend
          npm install
          npm run build

      - name: Set environment-specific variables
        run: |
          ENV_NAME="${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production') || (github.ref == 'refs/heads/develop' && 'staging') || 'development' }}"
          echo "DEPLOY_ENV=$ENV_NAME" >> $GITHUB_ENV
          
          # Set appropriate project name and domain based on environment
          case $ENV_NAME in
            production)
              echo "PAGES_PROJECT=fataplus-frontend" >> $GITHUB_ENV
              echo "FRONTEND_DOMAIN=app.fata.plus" >> $GITHUB_ENV
              ;;
            staging)
              echo "PAGES_PROJECT=fataplus-frontend-staging" >> $GITHUB_ENV
              echo "FRONTEND_DOMAIN=staging.fata.plus" >> $GITHUB_ENV
              ;;
            *)
              echo "PAGES_PROJECT=fataplus-frontend-dev" >> $GITHUB_ENV
              echo "FRONTEND_DOMAIN=dev.fata.plus" >> $GITHUB_ENV
              ;;
          esac

      - name: Deploy to Cloudflare Pages
        run: |
          cd web-frontend
          
          echo "üì¶ Deploying frontend to Cloudflare Pages (${{ env.DEPLOY_ENV }})..."
          
          # Deploy to Cloudflare Pages
          wrangler pages deploy out \
            --project-name ${{ env.PAGES_PROJECT }} \
            --compatibility-date 2024-01-01

          echo "‚úÖ Frontend deployed successfully!"

      - name: Configure Custom Domain (Production Only)
        if: env.DEPLOY_ENV == 'production'
        run: |
          echo "üåê Setting up custom domain: ${{ env.FRONTEND_DOMAIN }}"
          wrangler pages project domain add ${{ env.PAGES_PROJECT }} ${{ env.FRONTEND_DOMAIN }} || echo "Domain might already be configured"

  # Post-deployment health checks
  health-check:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always() && needs.deploy-backend.result == 'success'
    steps:
      - name: Setup environment variables
        run: |
          ENV_NAME="${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production') || (github.ref == 'refs/heads/develop' && 'staging') || 'development' }}"
          echo "DEPLOY_ENV=$ENV_NAME" >> $GITHUB_ENV
          
          case $ENV_NAME in
            production)
              echo "API_URL=https://api.fata.plus" >> $GITHUB_ENV
              echo "APP_URL=https://app.fata.plus" >> $GITHUB_ENV
              ;;
            staging)
              echo "API_URL=https://staging-api.fata.plus" >> $GITHUB_ENV
              echo "APP_URL=https://staging.fata.plus" >> $GITHUB_ENV
              ;;
            *)
              echo "API_URL=https://dev-api.fata.plus" >> $GITHUB_ENV
              echo "APP_URL=https://dev.fata.plus" >> $GITHUB_ENV
              ;;
          esac

      - name: Wait for deployment propagation
        run: |
          echo "‚è≥ Waiting for deployment to propagate across Cloudflare edge..."
          sleep 60

      - name: Health check API
        run: |
          echo "üîç Checking API health at ${{ env.API_URL }}"
          
          # Try multiple times as edge deployment might take a moment
          for i in {1..5}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" ${{ env.API_URL }}/health || echo "000")
            if [ "$response" = "200" ]; then
              echo "‚úÖ API health check passed (HTTP $response)"
              break
            elif [ "$i" = "5" ]; then
              echo "‚ùå API health check failed after 5 attempts (HTTP $response)"
              exit 1
            else
              echo "‚è≥ Attempt $i failed (HTTP $response), retrying in 30s..."
              sleep 30
            fi
          done

      - name: Health check Frontend (if deployed)
        if: needs.deploy-frontend.result == 'success'
        run: |
          echo "üîç Checking frontend at ${{ env.APP_URL }}"
          
          for i in {1..3}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" ${{ env.APP_URL }} || echo "000")
            if [ "$response" = "200" ]; then
              echo "‚úÖ Frontend health check passed (HTTP $response)"
              break
            elif [ "$i" = "3" ]; then
              echo "‚ö†Ô∏è Frontend health check failed (HTTP $response) - this might be normal for SPA"
            else
              echo "‚è≥ Attempt $i failed (HTTP $response), retrying in 20s..."
              sleep 20
            fi
          done

      - name: Test API endpoints
        run: |
          echo "üß™ Testing key API endpoints..."
          
          # Test API health endpoint specifically
          curl -f ${{ env.API_URL }}/health || echo "Health endpoint might not be ready yet"
          
          # Test CORS by checking headers
          curl -H "Origin: ${{ env.APP_URL }}" -H "Access-Control-Request-Method: GET" -H "Access-Control-Request-Headers: X-Requested-With" -X OPTIONS ${{ env.API_URL }}/health || echo "CORS preflight might not be configured yet"

      - name: Output deployment URLs
        run: |
          echo "üéâ Deployment Summary:"
          echo "üìç Environment: ${{ env.DEPLOY_ENV }}"
          echo "üöÄ API URL: ${{ env.API_URL }}"
          if [ "${{ needs.deploy-frontend.result }}" = "success" ]; then
            echo "üåê Frontend URL: ${{ env.APP_URL }}"
          fi
          echo "üìä Cloudflare Dashboard: https://dash.cloudflare.com"

  # Cleanup on failure
  cleanup-on-failure:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, health-check]
    if: failure() && (needs.deploy-backend.result == 'failure' || needs.health-check.result == 'failure')
    steps:
      - name: Rollback deployment
        run: |
          echo "üîÑ Deployment failed, considering rollback options..."
          echo "Manual rollback may be required through Cloudflare dashboard"
          echo "üåê Cloudflare Dashboard: https://dash.cloudflare.com"
          
          # For future implementation: automated rollback logic
          echo "‚ö†Ô∏è Please check the Cloudflare dashboard and consider rolling back if necessary"

  # Send deployment notifications
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, health-check]
    if: always()
    steps:
      - name: Determine deployment status
        run: |
          ENV_NAME="${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production') || (github.ref == 'refs/heads/develop' && 'staging') || 'development' }}"
          echo "DEPLOY_ENV=$ENV_NAME" >> $GITHUB_ENV
          
          if [ "${{ needs.deploy-backend.result }}" = "success" ] && ([ "${{ needs.deploy-frontend.result }}" = "success" ] || [ "${{ needs.deploy-frontend.result }}" = "skipped" ]); then
            echo "DEPLOYMENT_STATUS=success" >> $GITHUB_ENV
            echo "STATUS_EMOJI=‚úÖ" >> $GITHUB_ENV
          else
            echo "DEPLOYMENT_STATUS=failure" >> $GITHUB_ENV
            echo "STATUS_EMOJI=‚ùå" >> $GITHUB_ENV
          fi

      - name: Send Slack notification
        if: env.DEPLOYMENT_STATUS == 'success' || env.DEPLOYMENT_STATUS == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "${{ env.STATUS_EMOJI }} Fataplus Cloudflare Deployment",
              "attachments": [{
                "color": "${{ env.DEPLOYMENT_STATUS == 'success' && 'good' || 'danger' }}",
                "fields": [
                  {
                    "title": "Environment",
                    "value": "${{ env.DEPLOY_ENV }}",
                    "short": true
                  },
                  {
                    "title": "Status",
                    "value": "${{ env.DEPLOYMENT_STATUS }}",
                    "short": true
                  },
                  {
                    "title": "Commit",
                    "value": "${{ github.sha }}",
                    "short": true
                  },
                  {
                    "title": "Author",
                    "value": "${{ github.actor }}",
                    "short": true
                  }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        continue-on-error: true