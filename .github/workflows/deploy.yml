name: Deploy Fataplus Web Backend

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./fataplus-web-deploy
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to Production Server
      if: github.ref == 'refs/heads/main'
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          # Pull latest Docker image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

          # Stop existing container
          docker stop fataplus-web-backend || true
          docker rm fataplus-web-backend || true

          # Run new container
          docker run -d \
            --name fataplus-web-backend \
            --env-file /opt/fataplus/.env \
            --network fataplus-network \
            -p 8000:8000 \
            -v /opt/fataplus/logs:/app/logs \
            --restart unless-stopped \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

          # Health check
          sleep 10
          curl -f http://localhost:8000/health || exit 1

    - name: Deploy to Staging Server
      if: github.ref == 'refs/heads/main'
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          # Pull latest Docker image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

          # Stop existing container
          docker stop fataplus-web-backend-staging || true
          docker rm fataplus-web-backend-staging || true

          # Run new container
          docker run -d \
            --name fataplus-web-backend-staging \
            --env-file /opt/fataplus-staging/.env \
            --network fataplus-network \
            -p 8001:8000 \
            -v /opt/fataplus-staging/logs:/app/logs \
            --restart unless-stopped \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

          # Health check
          sleep 10
          curl -f http://localhost:8001/health || exit 1

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ghcr.io/fataplus/fataplus-agritech-platform/web-backend:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  performance-test:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run performance tests
      uses: grafana/k6-action@v0.3.0
      with:
        filename: './tests/performance/load-test.js'
        flags: --vus 100 --duration 30s

    - name: Upload performance test results
      uses: actions/upload-artifact@v4
      with:
        name: performance-test-results
        path: ./results/