# Fataplus Logging and Tracing Infrastructure
# Complete logging stack for African agricultural platform

apiVersion: v1
kind: Namespace
metadata:
  name: logging
  labels:
    name: logging
    environment: {{ .Values.environment }}
    app: fataplus

---
# Elasticsearch Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: elasticsearch-config
  namespace: logging
data:
  elasticsearch.yml: |
    cluster.name: fataplus-logging
    network.host: 0.0.0.0
    discovery.type: single-node
    xpack.security.enabled: false
    xpack.monitoring.collection.enabled: true
    indices.memory.index_buffer_size: 30%
    indices.query.bool.max_clause_count: 4096
    search.max_buckets: 10000

---
# Elasticsearch Deployment
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch
  namespace: logging
  labels:
    app: elasticsearch
    environment: {{ .Values.environment }}
spec:
  serviceName: elasticsearch
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
        environment: {{ .Values.environment }}
    spec:
      containers:
      - name: elasticsearch
        image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
        ports:
        - containerPort: 9200
          name: http
        - containerPort: 9300
          name: transport
        env:
        - name: discovery.type
          value: single-node
        - name: ES_JAVA_OPTS
          value: "-Xms1g -Xmx1g"
        volumeMounts:
        - name: elasticsearch-data
          mountPath: /usr/share/elasticsearch/data
        - name: elasticsearch-config
          mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
          subPath: elasticsearch.yml
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
      volumes:
      - name: elasticsearch-config
        configMap:
          name: elasticsearch-config
  volumeClaimTemplates:
  - metadata:
      name: elasticsearch-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "gp2"
      resources:
        requests:
          storage: 20Gi

---
# Elasticsearch Service
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  namespace: logging
  labels:
    app: elasticsearch
    environment: {{ .Values.environment }}
spec:
  ports:
  - port: 9200
    targetPort: 9200
    name: http
  selector:
    app: elasticsearch

---
# Kibana Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: kibana-config
  namespace: logging
data:
  kibana.yml: |
    server.name: kibana
    server.host: 0.0.0.0
    elasticsearch.hosts: ["http://elasticsearch:9200"]
    monitoring.enabled: true
    monitoring.ui.container.elasticsearch.enabled: true
    xpack.security.enabled: false
    xpack.monitoring.ui.container.logstash.enabled: true

---
# Kibana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
  namespace: logging
  labels:
    app: kibana
    environment: {{ .Values.environment }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
        environment: {{ .Values.environment }}
    spec:
      containers:
      - name: kibana
        image: docker.elastic.co/kibana/kibana:8.8.0
        ports:
        - containerPort: 5601
          name: http
        env:
        - name: ELASTICSEARCH_HOSTS
          value: "http://elasticsearch:9200"
        volumeMounts:
        - name: kibana-config
          mountPath: /usr/share/kibana/config/kibana.yml
          subPath: kibana.yml
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
      volumes:
      - name: kibana-config
        configMap:
          name: kibana-config

---
# Kibana Service
apiVersion: v1
kind: Service
metadata:
  name: kibana
  namespace: logging
  labels:
    app: kibana
    environment: {{ .Values.environment }}
spec:
  ports:
  - port: 5601
    targetPort: 5601
    name: http
  selector:
    app: kibana

---
# Loki Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-config
  namespace: logging
data:
  loki.yaml: |
    auth_enabled: false
    server:
      http_listen_port: 3100
      grpc_listen_port: 9096

    ingester:
      lifecycler:
        ring:
          kvstore:
            store: inmemory
          replication_factor: 1
      chunk_idle_period: 5m
      chunk_retain_period: 30s

    schema_config:
      configs:
        - from: 2024-01-01
          store: boltdb
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h

    storage_config:
      boltdb:
        directory: /loki/index
      filesystem:
        directory: /loki/chunks

    limits_config:
      enforce_metric_name: false
      reject_old_samples: true
      reject_old_samples_max_age: 168h

    chunk_store_config:
      max_look_back_period: 168h

    table_manager:
      retention_deletes_enabled: false
      retention_period: 0s

    query_range:
      align_queries_with_step: true
      max_parallel_shard_queries_per_tenant: 2048
      cache_results: true
      results_cache:
        cache:
          embedded_cache:
            enabled: true
            max_size_mb: 100
            ttl: 24h

---
# Loki Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki
  namespace: logging
  labels:
    app: loki
    environment: {{ .Values.environment }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loki
  template:
    metadata:
      labels:
        app: loki
        environment: {{ .Values.environment }}
    spec:
      containers:
      - name: loki
        image: grafana/loki:2.8.0
        ports:
        - containerPort: 3100
          name: http
        - containerPort: 9096
          name: grpc
        volumeMounts:
        - name: loki-config
          mountPath: /etc/loki/loki.yaml
          subPath: loki.yaml
        - name: loki-data
          mountPath: /loki
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
      volumes:
      - name: loki-config
        configMap:
          name: loki-config
      - name: loki-data
        emptyDir: {}

---
# Loki Service
apiVersion: v1
kind: Service
metadata:
  name: loki
  namespace: logging
  labels:
    app: loki
    environment: {{ .Values.environment }}
spec:
  ports:
  - port: 3100
    targetPort: 3100
    name: http
  selector:
    app: loki

---
# Promtail Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: promtail-config
  namespace: logging
data:
  promtail.yaml: |
    server:
      http_listen_port: 9080
      grpc_listen_port: 0

    positions:
      filename: /tmp/positions.yaml

    clients:
      - url: http://loki:3100/loki/api/v1/push

    scrape_configs:
      - job_name: kubernetes-pods
        kubernetes_sd_configs:
          - role: pod
        pipeline_stages:
          - json:
              expressions:
                timestamp: time
                message: log
                level: level
          - timestamp:
              source: timestamp
              format: RFC3339
        relabel_configs:
          - source_labels:
              - __meta_kubernetes_pod_node_name
            target_label: node
          - source_labels:
              - __meta_kubernetes_namespace
            target_label: namespace
          - source_labels:
              - __meta_kubernetes_pod_name
            target_label: pod
          - source_labels:
              - __meta_kubernetes_pod_container_name
            target_label: container
          - source_labels:
              - __meta_kubernetes_pod_label_app
            target_label: app
          - source_labels:
              - __meta_kubernetes_pod_label_environment
            target_label: environment

---
# Promtail DaemonSet
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: promtail
  namespace: logging
  labels:
    app: promtail
    environment: {{ .Values.environment }}
spec:
  selector:
    matchLabels:
      app: promtail
  template:
    metadata:
      labels:
        app: promtail
        environment: {{ .Values.environment }}
    spec:
      containers:
      - name: promtail
        image: grafana/promtail:2.8.0
        ports:
        - containerPort: 9080
          name: http
        volumeMounts:
        - name: promtail-config
          mountPath: /etc/promtail
        - name: docker-logs
          mountPath: /var/log
        - name: var-lib-docker
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: positions
          mountPath: /tmp
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: promtail-config
        configMap:
          name: promtail-config
      - name: docker-logs
        hostPath:
          path: /var/log
      - name: var-lib-docker
        hostPath:
          path: /var/lib/docker/containers
      - name: positions
        emptyDir: {}

---
# Promtail Service
apiVersion: v1
kind: Service
metadata:
  name: promtail
  namespace: logging
  labels:
    app: promtail
    environment: {{ .Values.environment }}
spec:
  ports:
  - port: 9080
    targetPort: 9080
    name: http
  selector:
    app: promtail

---
# Jaeger Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: jaeger-config
  namespace: logging
data:
  jaeger.yml: |
    query:
      base-path: /
    storage:
      type: elasticsearch
      elasticsearch:
        server-urls: http://elasticsearch:9200
        index-prefix: jaeger
        username: ""
        password: ""

    collector:
      zipkin:
        host-port: :9411
      otlp:
        grpc:
          host-port: :4317
        http:
          host-port: :4318

---
# Jaeger Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger-collector
  namespace: logging
  labels:
    app: jaeger-collector
    environment: {{ .Values.environment }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jaeger-collector
  template:
    metadata:
      labels:
        app: jaeger-collector
        environment: {{ .Values.environment }}
    spec:
      containers:
      - name: jaeger-collector
        image: jaegertracing/jaeger-collector:1.42
        ports:
        - containerPort: 9411
          name: zipkin
        - containerPort: 4317
          name: otlp-grpc
        - containerPort: 4318
          name: otlp-http
        env:
        - name: SPAN_STORAGE_TYPE
          value: elasticsearch
        - name: ES_SERVER_URLS
          value: http://elasticsearch:9200
        - name: ES_INDEX_PREFIX
          value: jaeger
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"

---
# Jaeger Query Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger-query
  namespace: logging
  labels:
    app: jaeger-query
    environment: {{ .Values.environment }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jaeger-query
  template:
    metadata:
      labels:
        app: jaeger-query
        environment: {{ .Values.environment }}
    spec:
      containers:
      - name: jaeger-query
        image: jaegertracing/jaeger-query:1.42
        ports:
        - containerPort: 16686
          name: query
        env:
        - name: SPAN_STORAGE_TYPE
          value: elasticsearch
        - name: ES_SERVER_URLS
          value: http://elasticsearch:9200
        - name: ES_INDEX_PREFIX
          value: jaeger
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"

---
# Jaeger Services
apiVersion: v1
kind: Service
metadata:
  name: jaeger-collector
  namespace: logging
  labels:
    app: jaeger-collector
    environment: {{ .Values.environment }}
spec:
  ports:
  - port: 9411
    targetPort: 9411
    name: zipkin
  - port: 4317
    targetPort: 4317
    name: otlp-grpc
  - port: 4318
    targetPort: 4318
    name: otlp-http
  selector:
    app: jaeger-collector

---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-query
  namespace: logging
  labels:
    app: jaeger-query
    environment: {{ .Values.environment }}
spec:
  ports:
  - port: 16686
    targetPort: 16686
    name: query
  selector:
    app: jaeger-query

---
# Fluentd Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentd-config
  namespace: logging
data:
  fluent.conf: |
    <source>
      @type tail
      path /var/log/containers/*fataplus*.log
      pos_file /var/log/fluentd-containers.log.pos
      tag kubernetes.*
      format json
      time_format %Y-%m-%dT%H:%M:%S.%NZ
    </source>

    <match kubernetes.**>
      @type elasticsearch
      host elasticsearch
      port 9200
      index_name fataplus-logs
      type_name _doc
      include_tag_key true
      tag_key @log_name
      flush_interval 5s
    </match>

    <match **>
      @type loki
      url http://loki:3100/loki/api/v1/push
      extract_kubernetes_labels true
      drop_single_key true
      <labels>
        app ${record["kubernetes"]["labels"]["app"] || "unknown"}
        namespace ${record["kubernetes"]["namespace_name"] || "unknown"}
        pod ${record["kubernetes"]["pod_name"] || "unknown"}
        container ${record["kubernetes"]["container_name"] || "unknown"}
      </labels>
    </match>

---
# Fluentd DaemonSet
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluentd
  namespace: logging
  labels:
    app: fluentd
    environment: {{ .Values.environment }}
spec:
  selector:
    matchLabels:
      app: fluentd
  template:
    metadata:
      labels:
        app: fluentd
        environment: {{ .Values.environment }}
    spec:
      containers:
      - name: fluentd
        image: fluent/fluentd:v1.16-1
        ports:
        - containerPort: 24224
          name: forward
        volumeMounts:
        - name: fluentd-config
          mountPath: /fluentd/etc
        - name: var-log
          mountPath: /var/log
        - name: var-lib-docker
          mountPath: /var/lib/docker/containers
          readOnly: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: fluentd-config
        configMap:
          name: fluentd-config
      - name: var-log
        hostPath:
          path: /var/log
      - name: var-lib-docker
        hostPath:
          path: /var/lib/docker/containers